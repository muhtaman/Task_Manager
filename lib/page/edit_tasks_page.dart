// ignore_for_file: prefer_const_constructors

//Page that opens when creating/editting tasks

import 'package:flutter/material.dart';
import 'package:todolist_flutter/db/task_db.dart';
import 'package:todolist_flutter/page/task.dart';
import 'package:todolist_flutter/widgets/task_form_widget.dart';

class EditTasksPage extends StatefulWidget {
  final Task? task;

  const EditTasksPage({
    Key? key,
    this.task,
  }) : super(key: key);
  @override
  _EditTasksPageState createState() => _EditTasksPageState();
}

class _EditTasksPageState extends State<EditTasksPage> {
  final _formKey = GlobalKey<FormState>();
  late String title;
  late String description;

  //Runs on page creation that checks if task already
  //has title or description

  @override
  void initState() {
    super.initState();

    title = widget.task?.title ?? '';
    description = widget.task?.description ?? '';
  }

  @override
  Widget build(BuildContext context) => Scaffold(
        // AppBar provides a back button
        appBar: AppBar(
          actions: [
            buildButton(),
          ],
        ),
        //prevents keyboard from causing overflow
        resizeToAvoidBottomInset: false,

        bottomNavigationBar: buildButton(),
        body: Column(
          children: [
            Form(
              key: _formKey,
              child: TaskFormWidget(
                title: title,
                description: description,
                onChangedTitle: (title) => setState(() => this.title = title),
                onChangedDescription: (description) =>
                    setState(() => this.description = description),
              ),
            ),
          ],
        ),
      );

  //Creates Save Button
  Widget buildButton() {
    final isFormValid = title.isNotEmpty && description.isNotEmpty;

    return Padding(
      padding: EdgeInsets.symmetric(vertical: 10, horizontal: 16),
      child: ElevatedButton(
        style: ElevatedButton.styleFrom(
          onPrimary: Colors.white,
          primary: isFormValid ? null : Colors.grey.shade700,
        ),
        onPressed: addUpdateTask,
        child: Text('Save'),
      ),
    );
  }

  void addUpdateTask() async {
    final isValid = _formKey.currentState!.validate();

    if (isValid) {
      final isUpdating = widget.task != null;

      if (isUpdating) {
        await updateTask();
      } else {
        await addTask();
      }

      Navigator.of(context).pop();
    }
  }

  Future updateTask() async {
    final task = widget.task!.copy(
      title: title,
      description: description,
    );

    await TasksDatabase.instance.update(task);
  }

  Future addTask() async {
    final task = Task(
      //unique id generated by time
      id: DateTime.now().millisecondsSinceEpoch,
      title: title,
      isComplete: false,
      description: description,
      createdTime: DateTime.now(),
    );

    await TasksDatabase.instance.create(task);
  }
}
